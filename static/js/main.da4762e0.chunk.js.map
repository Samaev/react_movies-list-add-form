{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","onAdd","useState","setDescription","setImgUrl","setImdbUrl","setImdbId","setTitle","hasTitleError","setTitleError","hasImdbUrlError","setImdbUrlError","hasImdbIdError","setImdbIdError","hasImgUrlError","setImgUrlError","checkButtonElem","checkButton","useEffect","onSubmit","event","preventDefault","Error","type","name","value","classNames","placeholder","onBlur","target","onChange","disabled","App","moviesFromServer","setMovies","key","setKey","newKey","String","Number","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da4762e0.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => {\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard key={movie.imdbId} {...movie} />\n      ))}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n  movies: Movie[],\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd, movies }) => {\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setTitleError] = useState(false);\n  const [hasImdbUrlError, setImdbUrlError] = useState(false);\n  const [hasImdbIdError, setImdbIdError] = useState(false);\n  const [hasImgUrlError, setImgUrlError] = useState(false);\n  const [checkButtonElem, checkButton] = useState(true);\n\n  const checkButtonOff = () => {\n    if (title && imgUrl && imdbUrl && imdbId) {\n      checkButton(false);\n    } else {\n      checkButton(true);\n    }\n  };\n\n  useEffect(checkButtonOff);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setTitleError(!title);\n    setImgUrlError(!imgUrl);\n    setImdbIdError(!imdbId);\n    setImdbUrlError(!imdbUrl);\n\n    if (!movies) {\n      throw new Error('You got nothing to watch from storage');\n      /// /make a variable to show message (for future)\n    }\n\n    onAdd({\n      title, description, imgUrl, imdbUrl, imdbId,\n    });\n\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  return (\n    <form className=\"NewMovie\" onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n      <div className=\"field\">\n        <label className=\"label control\">\n          <p>Title</p>\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={title}\n            data-cy=\"movie-title\"\n            className={classNames('input', { 'is-danger': hasTitleError })}\n            placeholder=\"Enter a title\"\n            onBlur={(event) => (!event.target.value && setTitleError(true))}\n            onChange={event => {\n              setTitle(event.target.value);\n              setTitleError(false);\n            }}\n          />\n        </label>\n        {hasTitleError && (<p className=\"help is-danger\">Title is required</p>)}\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label control\">\n          <p>Description</p>\n          <input\n            name=\"description\"\n            className=\"input\"\n            placeholder=\"Enter a description\"\n            data-cy=\"movie-description\"\n            value={description}\n            onChange={event => {\n              setDescription(event.target.value);\n            }}\n          />\n        </label>\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label control\">\n          <p>Image URL</p>\n          <input\n            type=\"text\"\n            className={classNames('input', { 'is-danger': hasImgUrlError })}\n            name=\"imgUrl\"\n            value={imgUrl}\n            data-cy=\"movie-imgUrl\"\n            onBlur={event => (!event.target.value && setImgUrlError(true))}\n            placeholder=\"Enter a image URL\"\n            onChange={event => {\n              setImgUrl(event.target.value);\n              setImgUrlError(false);\n            }}\n          />\n        </label>\n      </div>\n\n      {hasImgUrlError && (\n        <p className=\"help is-danger\">Image URL is required</p>\n      )}\n\n      <div className=\"field\">\n        <label className=\"label control\">\n          <p>Imdb URL</p>\n          <input\n            type=\"text\"\n            className={classNames('input', { 'is-danger': hasImdbUrlError })}\n            name=\"imdbUrl\"\n            data-cy=\"movie-imdbUrl\"\n            placeholder=\"Enter a imdb URL\"\n            value={imdbUrl}\n            onBlur={event => (!event.target.value && setImdbUrlError(true))}\n            onChange={event => {\n              setImdbUrl(event.target.value);\n              setImdbUrlError(false);\n            }}\n          />\n        </label>\n      </div>\n      {hasImdbUrlError && (\n        <p className=\"help is-danger\">Imdb URL is required</p>\n      )}\n      <div className=\"field\">\n        <label className=\"label control\">\n          <p>Imdb ID</p>\n          <input\n            type=\"text\"\n            name=\"imdbId\"\n            data-cy=\"movie-imdbId\"\n            className={classNames('input', { 'is-danger': hasImdbIdError })}\n            placeholder=\"Enter a Imdb ID\"\n            value={imdbId}\n            onBlur={event => (!event.target.value && setImdbIdError(true))}\n            onChange={event => {\n              setImdbId(event.target.value);\n              setImdbIdError(false);\n            }}\n          />\n        </label>\n      </div>\n      {hasImdbIdError && (\n        <p className=\"help is-danger\">Imdb ID is required</p>\n      )}\n\n      <div>\n        <button\n          type=\"submit\"\n          data-cy=\"button-submit\"\n          className=\"button is-link\"\n          disabled={checkButtonElem}\n        >\n          Add\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const [key, setKey] = useState('');\n\n  const addMovie = (movie: Movie) => {\n    const newKey = `tt${String((Number(movies[0].imdbId.slice(1)) + 1))}`;\n\n    setMovies([...movies, movie]);\n    setKey(newKey);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie key={key} onAdd={addMovie} movies={movies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}